/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const bodyParser = require("body-parser");
const { error } = require("console");
const express = require("express");
const { stringify } = require("querystring");
const fsPromises = require("fs").promises;
const path = require("path");
const app = express();
const PORT = 3000;
app.use(bodyParser.urlencoded({ extended: true }));

//////////////////// ------------------ALL MISCELLANEOUS FUNCTION------------------- //////////////////////

// Generating a Random Number FUNCTION
const randomNumberFn = (min, max) => {
  return Math.floor(Math.random() * (max - min) - min);
};

// FUNCTION For Getting Index At which Id Resides

////////////////////////// ---------ROUTES HANDLER FUNCTION---------- //////////////////////////

//////////////// GET HANDLER ////////////////
const getHandler = (req, res) => {
  // READING Data from File SYSTEM
  const readFile = fsPromises.readFile("./todos.json", "utf-8");

  readFile
    .then((notes) => {
      // PARSE NotES FROM STRING TO JSON
      const data = JSON.parse(notes);

      // SENDING RESPONSE TO USER
      res.status(200).json(data);
    })
    .catch((err) => {
      console.log(err);
      res.status(404).send("There is something went Wrong");
    });
};

/////////////// POST HANDLER /////////////////
const postHandler = (req, res) => {
  // Getting String From REQUEST BODY
  const { title, description } = req.body;

  // Calling a Random Number FN
  const randomValue = randomNumberFn(1000, 10000);

  // Creating a new Post
  const post = {
    title: title,
    description: description,
    id: randomValue,
  };

  const readFile = fsPromises.readFile("./todos.json", "utf-8");
  // READING FILE BY readFIle Promises
  readFile
    .then((data) => {
      // Parse STRING JSON to Actual JSON
      const parsedData = JSON.parse(data);

      // PUSH new POST to Array
      parsedData.push(post);

      // STRINGFY POST ARRAY TO STRING
      const writeFileArray = JSON.stringify(parsedData);

      //WRITE Array ack to File SYSTEM using writeFile
      const writeFilePromise = fsPromises.writeFile(
        "./todos.json",
        writeFileArray
      );

      // Response SEND to SERVER
      writeFilePromise
        .then(() => {
          res.status(200).json("Finally Post Posted");
        })
        .catch((err) => {
          console.log(err);
          res.status(404).send("There is something went wrong");
        });
    })
    .catch((err) => {
      console.log(err);
      res.send("ERROR");
    });
};

/////////////// DELETE HANDLER /////////////////

const deleteHandler = (req, res) => {
  // Getting ID to REMOVE POST
  const id = req.params.id;

  // READING POST VIA ARRAY using readFile
  const readFileFn = fsPromises.readFile("./todos.json", "utf-8");

  readFileFn.then((data) => {
    // PARSED DATA FROM STRINGFY To JSON
    const parsedData = JSON.parse(data);

    // FILTER ( DELETE ) PARTICULAR Parsed DATA
    const deletedArray = parsedData.filter((post) => {
      return post.id != id;
    });
    console.log(deletedArray);

    //CONVERT JSON INTO STRING FOR SENDING DATA TO FILE
    const stringData = JSON.stringify(deletedArray);

    //Sending File to File System Back
    const writeFileFunction = fsPromises.writeFile("./todos.json", stringData);

    writeFileFunction
      .then((puma) => {
        // RESPONSE SEND TO USER FROM SERVER
        res.status(200).send("Successfully Deleted");
      })
      .catch((err) => {
        console.log(err);
        res.status(404).send("There is omething went wrong ");
      });
  });
};

/////////////////////////// ALLL ROUTES /////////////////////////////////

// APP GET ROUTE
app.get("/todos", getHandler);

// APP POST ROUTE
app.post("/todos", postHandler);

// APP DELETE ROUTE
app.delete("/todos/:id", deleteHandler);

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "index.html"));
});

// LISTEN MSG
const listenMsg = () => {
  console.log("Server just stareted at " + PORT);
};

// APP LISTEN
app.listen(PORT, listenMsg);
